{"pages":[],"posts":[{"title":"CSS学习笔记第七章-显示与隐藏","text":"一、显示与隐藏类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，就会重新出现 本质：让一个元素在页面中隐藏或者显示出来 二、display 属性display 属性用于设置一个元素如何显示 display: none; 隐藏元素 display: block; 除了转换为块级元素之外，同时还有显示元素的意思 display 隐藏元素后，不再占有原来的位置 三、visibility 属性（可见性）visibility 属性用于指定一个元素是可见还是隐藏 visibility: visible; 元素可见 visibility: hidden; 元素隐藏 visibility 隐藏元素后，继续占有原来的位置 四、overflow 属性（溢出）overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度）时，会发生什么 属性值 描述 visible 不剪切内容，也不添加滚动条 hidden 不显示超过元素尺寸的内容，超出的部分隐藏掉 scroll 不管内容有没有超出，总是显示滚动条 auto 超出自动显示滚动条，不超出则不显示","link":"/2022/02/16/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%98%BE%E7%A4%BA%E4%B8%8E%E9%9A%90%E8%97%8F/"},{"title":"CSS学习笔记第一章-入门","text":"一、CSS简介HTML的局限性：HTML只关注内容的语义，比如 h1 表明这是一个大标题，p 表明这是一个段落， img 表明这有一个图片等 虽然HTML可以做简单的样式（丑），但是带来的是代码的臃肿和繁琐（烦） 什么是CSS：CSS是层叠式表（Casscading Style Sheets）或称之为CSS样式表或联样式表 CSS也是一种标记语言，CSS让我们的网页更加丰富多彩，布局更加灵活自如，被称为网页的美容师 CSS主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片（宽高、边框样式、边距等） 由HTML专注去做结构呈现，样式交给CSS，即结构和样式相分离 CSS语法规范：CSS样式规则由主要由两个部分组成：选择器以及一条或多条声明 语法： 123456&lt;style&gt; 选择器1 {属性1: 属性值1; 属性2: 属性值2; 属性3: 属性值3; ...} 选择器2 {属性1: 属性值1; 属性2: 属性值2; 属性3: 属性值3; ...} 选择器3 {属性1: 属性值1; 属性2: 属性值2; 属性3: 属性值3; ...} ...&lt;/style&gt; 一般写在 head 标签中（但实际开发中，一般都是写在外部CSS文件中） CSS代码规范：样式格式书写分以下两种 紧凑格式 1h3 { color: deppink; font-size: 20px;} 展开格式（推荐，因为更直观，可读性高） 1234h3 { color: pink; ont-size: 20px;} 样式的大小写：CSS代码不区分大小写，但是推荐全部使用小写字母 CSS空格规范： 属性值前面，冒号后面保留一个空格 选择器（标签）和大括号之间保留一个空格 二、选择器选择器的作用：选择器就是根据不同需求把不同的标签选出来，简单来说就是选择标签用的 选择器的分类：选择器分类基础选择器和复合选择器两大类 基础选择器是由单个选择器组成的 基础选择器又包括：标签选择器、类选择器、id选择器和通配符选择器 三、SS基础选择器标签选择器：标签选择器(元素选择器) 是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式 语法： 123标签名 { 样式声明...} 作用：标签选择器可以把某一类标签全部选择出来 优点：能快速为页面中用类型的标签统一设置样式 缺点：不能设计差异化样式，只能选择全部的当前类标签 类选择器（开发最常用）：如果想要差异化选择不同的标签，单独选择一个或几个标签时，可以使用类选择器 类选择器在HTML中以 class 属性表示，在CSS中，类选择器以一个’.’符号表示 语法： 123456/* 定义时 */.类名 { 样式声明...}/* 调用时 */clas =&quot;类名&quot; 口诀：样式点定义 结构类调用 注意： 类选择器使用”.”符号进行表示，后面紧跟类名（自定义，我们自己命名的） 可以理解为给这个标签起了一个名字，类选择器选择的就是这个名字 长名称或词组可以使用’-‘符号间隔单词来为选择器命名 不要使用纯数字、中文等命名，尽量使用英文字母 命名要有意义，见名知其意 类选择器-多类名：我们可以给一个标签指定多个类名，从而达到更多的选择目的，这些类名都可以选出这个标签 例如： 1&lt;div class=&quot;red font20&quot;&gt;亚瑟&lt;/div&gt; 注意： 多个类名中间必须用空格分开 这个标签就可以分别具有这些类名的样式 id 选择器：id 选择器可以为标有特定 id 的HTML元素指定样式 HTML元素中以 id 属性来设置id选择器，在CSS中，id 选择器以’#’符号表示 语法： 123456/* 定义时 */#id名 { 样式声明...}/* 调用时 */id =&quot;id名&quot; 口诀：样式#定义，结构id调用，只能调用一次，别人切勿使用 注意：id属性只能在每个HTML文档中出现一次 类选择器和 id 选择器的区别： 类选择器好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用 id 选择器好比人的身份证号码，一个人只有一个号码，不得重复使用 类选择器和 id 选择器最大的不同在于使用次数上 类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上 ，经常和JavaScript 搭配使用 通配符选择器：在CSS中，通配符选择器使用’*’定义，它表示选取页面中所有元素（标签） 语法： 123* { 样式声明...} 通配符选择器不需要调用，自动就给所有的元素使用样式，特殊情况才会使用，后面讲解使用场景 四、CSS复合选择器复合选择器的作用: 复合选择器可以更准确、更高效的选择目标元素（标签） 复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的 复合选择器的分类：复合选择器是建立在基础选择器之上的，对基本选择器进行组合行成的 常用的复合选择器包括：后代选择器、子选择器、并集选择器和伪类选择器等 后代选择器：后代选择器又称为包含选择器，可以选择父元素里面的子元素 其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，当标签发生嵌套时，内层标签就成为外层标签的后代 语法： 123元素1 元素2 { 样式声明...} 上述语法表示选择元素1里面的所有元素2（后代元素） 例如： 1234/* 选择ul标签里面所有的li标签元素 */ul li { 样式声明... } 注意： 元素1和元素2中间用空格隔开 元素1是父级，元素2是子级，最终选择的是元素2 元素2可以是子级，也可以是子级的子级等，只要是元素1的后代即可 元素1和元素2可以是任意基础选择器 子选择器：子选择器又称为子元素选择器，只能选择最近一级的子元素 语法： 123元素1&gt;元素2 { 样式声明...} 上述语法表示选择元素1里面的所有直接后代（子元素）元素2 注意： 元素1和元素2中间用大于号隔开 元素1是父级，元素2是子级，最终选择的是元素2 元素2必须是最近一级的子元素的同类型 并集选择器：并集选择器可以选择多组标签或元素，同时为他们定义相同的样式 语法： 123元素1,元素2... { 样式声明...} 注意： 各个元素之间用逗号隔开，一般竖着写 逗号可理解为和的意思，通常用于集体样式声明 伪类选择器：伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素 伪类选择器书写的最大特点是用’:’冒号表示 语法： 123元素:伪类选择器 { 样式声明...} 链接伪类选择器： 选择符 描述 a:link 选择所有未被访问过的链接 a:visited 选择所有已被访问过的链接 a:hover 选择鼠标指针位于其上的链接 a:active 选择活动链接（鼠标按下未弹起的链接） 注意 ： 为了确保选择器生效，请按照LVHA的顺序声明 :link &gt; : visited &gt; :hover &gt; :active 因为 a 链接标签在浏览器中具有默认样式，在实际开发中都需要给链接单独指定样式 焦点伪类选择器：input:focus 选择获取得焦点的表单元素 焦点就是光标，一般情况 input 类表单元素才能获取","link":"/2022/02/10/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%AE%80%E4%BB%8B%E5%92%8C%E9%80%89%E6%8B%A9%E5%99%A8%20/"},{"title":"CSS学习笔记第三章-引入和元素显示模式","text":"一、CSS引入方式按照CSS样式书写的位置(或者引入的方式)，CSS样式表可以分为三大类 行内样式表（行内式）：行内样式表是在元素标签内部的 style 属性中设定CSS样式，适合于修改简单样式 例如： 1&lt;div style=&quot;color: red; font-size: 12px&quot;&gt;青春不常在，抓紧谈恋爱&lt;/div&gt; style 其实就是标签的属性，在双引号中，写法要符合CSS规范 由于书写繁琐，并且没有体现出结构与样式相分离的思想，不推荐大量使用（实际开发，几乎不使用） 内部样式表（嵌入式）：内部样式表是写到HTML文档内部，将所有的CSS代码抽取出来，单独放到一个 style 标签中 style 标签理论上可以放在HTML文档的任何地方，但一般会放在文档的 head 标签中 通过此种方式，可以方便控制当前整个页面中的元素样式设置 代码结构清晰 ，但是并没有实现结构与样式完全分离 使用内部样式表设定CSS，通常也被称为嵌入式引入 外部样式表（链接式）：实际开发都是外部样式表，适合于样式比较多的情况 核心：样式单独写到CSS文件中，之后把CSS文件引入到HTML页面按中使用 引入外部样式表分为两步： 新建一个后缀名为 .css 的样式文件，把所有CSS代码都写入此文件中 在HTML文档中，使用&lt;link&gt;标签引入这个文件 例如： 1&lt;link rel=&quot;stylesheet&quot; href=&quot;css文件路径&quot;&gt; 二、元素显示模式什么是元素显示模式：网页的标签非常多，在不同地方会用到不同类型的标签，了解它们的特点可以更好的布局我们的网页 元素显示模式就是元素（标签）以什么方式进行显示，例如：div 自己独占一行，一行可以放多个 span HTML元素一般分为块元素和行内元素两种类型 块元素：常见的块元素有 h1 ~ h6、p、div、ul、ol、li 等标签，其中 div 标签是最典型的块元素 特点： 比较霸道，自己独占一行 高度、宽度、外边距以及内边距都可以控制 宽度默认是容器（父级元素）的宽度 是一个容器及盒子，里面可以块元素和行内元素 注意： 文字类的元素内不能使用块元素 p 标签主要用于存放文字，因此 p 标签里面不能放块元素 同理，h1 ~ h6 等都是文字类块元素标签，里面也不能放其他块元素 行内元素（内联元素）：常见的行内元素有a、strong、b、em、i、del、s、ins、u、span 等标签，其中 span 是最典型的行内元素 特点： 相邻行内元素在一行上 高度、宽度直接设置是无效的 宽度默认是它本身内容的宽度 行内元素只能容纳文本或其他行内元素 注意： 超链接 a 标签里面不能再放超链接 a 标签 特殊情况超链接 a 标签里面可以放块级元素，但是给超链接 a 标签转换一下块级模式最安全 行内块元素：在行内元素中有几个特殊的标签 img、input、td 等标签，它们同时具有块元素和行内元素的特点，称之为行内块元素 特点 ： 和相邻行内元素及行内块元素在一行上，但是他们直接会有空白缝隙，一行可以显示多个（行内元素特点） 宽度默认就是它本身内容的宽度（行内元素特点） 高度、宽度、外边距和内边距都可以控制（块元素特点） CSS元素显示模式转换：特殊情况下，我们需要元素模式的转换，简单理解就是一种模式的元素需要另一种模式的特性 123456/* 转换为块元素语法 */dispaly: block;/* 转换为行内元素语法 */dispaly: inline;/* 转换为行内块元素语法 */ispaly: inline-block;","link":"/2022/02/12/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%BC%95%E5%85%A5%E5%92%8C%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F/"},{"title":"CSS学习笔记第二章-字体、文本和背景","text":"一、CSS字体属性CSS Fonts（字体）属性用于定义字体系列、大小、粗细和样式等 font-family 属性：用于定义文本的字体系列 语法： 12/* 依次匹配 如果系统有该字体 则显示 */font-family: 字体1, 字体2, 字体3...; 各种字体之间必须使用’,’符号隔开 如果有空格隔开的多个单词组成的字体，加’’引号括起来 尽量使用系统默认自带字体，保证在任何用户的浏览器中都能正确显示 font-size 属性：用于定义文本的字体大小 语法： 1font-size: 大小; px （像素）我们网页中最常用的单位 不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小 font-weight 属性：用于定义文本的字体粗细 语法： 1font-weight: normal | bold | bolder | lighter | number; 属性 描述 normal 正常字体（400） bold 加粗字体（700） bolder 特加粗字体 lighter 细字体 number 数字决定粗细（100-900）（实际开发中，提倡使用数字） font-style 属性：用于定义文本的字体样式 语法： 1font-style: normal | italic; 属性 描述 normal 正常字体 italic 斜字体 line-height 属性：用于定义文本的行高 语法： 1line-height: normal | length; 属性 描述 normal 默认行高 length 可由整数、浮点数和单位标识符，允许为负值，也可以为百分比，取值是基于字体的高度尺寸 font-variant 属性：用于定义文本的字体大写 语法： 1font-variant: normal | small-caps; 属性 描述 normal 正常字体 small-caps 小型字母转为大写字母字体 font 复合属性：用于文本一次性定义各种属性，节约代码空间 语法： 1font: font-style font-variant font-weight font-size/line-height font-family; 口诀:倾斜 大写 加粗 大小 行高 字体 注意： 参数必须按照如上的排列顺序，每个参数仅允许有一个值，忽略的将使用其参数对应的独立属性的默认值 必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用 二、CSS文本属性CSS Text（文本）属性可定义文本的外观，比如字体的颜色、对齐方式、装饰文本、文本缩进、行间距等 color 属性：用于定义文本的颜色 语法： 1color: color; color值 描述 预定义颜色 如：red，green，blue 十六进制 如：#FF0000，#FF6600 RGB代码 如：rgb(255, 0, 0)，rgb(100%, 0%, 0%) text-align 属性：用于定义文本的水平对齐方式 语法： 1text-align: left | right | center | justify; 属性 描述 left 左对齐（默认） right 右对齐 center 居中 justify 两端对齐 text-decoration 属性：用于添加文本的修饰，可以给文本添加下划线、贯穿线和上划线等 语法： 1text-decoration: none | underline | blink | overline | line-through; 属性 描述 none 无装饰（默认） underline 下划线 blink 闪烁 link-through 贯穿线 overline 上划线 text-indent 属性：用于指定文本第一行的缩进，通常是将段落的首行缩进 语法： 1text-indent: length; length：可由整数、浮点数和单位标识符，允许为负值，也可以为百分比，取值是基于字体的高度尺寸 em 是一个是一个相对单位，就是当前元素1个文字的大小（常用） line-height 属性：用于设置行间的距离(行高)，可以控制文字行与行之间的距离 语法： 1line-height: normal | length; 属性 描述 normal 默认行高 length 可由整数、浮点数和单位标识符，允许为负值，也可以为百分比，取值是基于字体的高度尺寸 小技巧： 让文字的行高等于盒子的高度，就可以让文字在盒子内垂直居中 简单理解:行高的上空隙和下空隙把文字挤到中间了 如果行高小于盒子的高度，文字会偏上，如果行高大于盒子的高度，文字会偏下 三、CSS背景属性通过CSS背景属性，可以给页面元素添加背景样式 背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等 background-color 属性：用于定义了元素的背景颜色 语法： 1background-color: transparent | color; 属性 描述 transparent 背景色透明（默认） color 预定义颜色、十六进制或RGB代码 background-image 属性：用于定义了元素的背景图像，实际开发常见于 logo 或者一些装饰性的小图片或者超大的背景图片 优点：非常便于控制位置（精灵图也是一种运用场景） 语法： 1background-image: none | url(url); 属性 描述 none 无背景图（默认） url 使用绝对或相对地址指定背景图像 background-repeat 属性：用于定义背景图像是否进行平铺 语法： 1background-repeat: repeat | no-repeat | repeat-x | repeat-y; 属性 描述 repeat 背景图像在纵向和横向平铺（默认） no-repeat 背景图像不平铺 repeat-x 背景图像在横向平铺 repeat-y 背景图像在纵向平铺 background-position 属性：用于定义图片在背景中的位置 语法： 12background-position : length(x) || length(y)background-position : position(x) || position(y) 属性 描述 length 整数、浮点数、百分数 position top、center、bottom、left、center、right 方位名词 参数是方位名词： 如果只指定了一个方位名词，另一个值忽略，则第二个值默认居中对齐 如果指定了两个方位名词，则两个值前后顺序无关 参数是精确单位： 如果参数值是精确单位，那么第一个是 x 坐标，第二个是 y 坐标 如果只指定一个数值，那么该数值一定是 x 坐标，另一个 y 坐标默认垂直居中 参数是混合单位： 如果指定的两个值是方位名词和精确单位混合使用的，则第一个是 x 坐标，第二个是 y 坐标 background-attachment 属性：用于设置背景图像是否固定或随着页面的其余部分滚动，后期可以制作视差滚动的效果 语法： 1background-attachment: scroll | fixed; 属性 描述 scroll 背景图像是随对象内容滚动（默认） fixed 背景图像固定 rgba() 属性：用于定义背景颜色半透明的效果 语法： 1background: rgba(red值, green值, blue值, alpha值); 注意： alpha 透明度取值范围在0~1之间 背景半透明是指盒子背景颜色半透明，盒子里面的内容不受影响 CSS新增属性，是 IE9+ 版本浏览器才支持的 在实际开发中，我们不太关注兼容性写法了，放心使用 background 复合属性：用于定义文本的各种属性，节约代码空间 语法： 1background: background-color background-image background-repeat background-attachment background-position; 口诀：颜色 图片 平铺 滚动 位置（没有顺序要求）","link":"/2022/02/11/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%AD%97%E4%BD%93%E3%80%81%E6%96%87%E6%9C%AC%E5%92%8C%E8%83%8C%E6%99%AF%20/"},{"title":"CSS学习笔记第九章-新增特性","text":"一、HTML5的新特性HTML5的新增特性主要是针对以前的不足，增加了一些新的标签、新的表单和新的表单属性等 这些新特性都有兼容性问题，基本是 IE9+ 以上版本的浏览器才支持，但不考虑兼容性，可以大量使用这些新特性 声明： 新特性增加了很多，但是我们专注于开发常用的新特性 语义化标签：以前布局，我们基本用都是用 div 来做的，但是 div 对于搜索引擎来说，是没语义的 标签 语义 &lt;header&gt; &lt;/header&gt; 头部标签 &lt;nav&gt; 导航标签 &lt;article&gt; &lt;/article&gt; 内容标签 &lt;section&gt; &lt;/section&gt; 定义文档某个区域的标签 &lt;aside&gt; &lt;/aside&gt; 侧边栏标签 &lt;footer&gt; &lt;/footer&gt; 尾部标签 注意： 这种语义化标签主要是针对搜索引擎的 这些新标签在页面中可以使用多次 在 IE9 中，需要把这些元素转换为块级元素 移动端更喜欢使用这些新标签，不必考虑兼容性问题 音频标签：使用音频标签 &lt;audio&gt; &lt;/audio&gt; 可以很方便的在页面中嵌入音频，而不再去使用 flash 和其他浏览器插件 语法： 1&lt;audio src=&quot;音频 url 地址&quot; controls=&quot;controls&quot;&gt;&lt;/audio&gt; 属性： 属性 属性值 描述 autoplay autoplay 音频加载就绪后自动播放（chrome 不允许） controls controls 显示音频控件 loop loop 循环播放 src url 音频 url 地址 视频标签：使用视频标签 &lt;video&gt; &lt;/video&gt; 可以很方便的在页面中嵌入视频，而不再去使用 flash 和其他浏览器插件 语法： 1&lt;video src=&quot;视频 url 地址&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt; 属性： 属性 属性值 描述 autoplay autoplay 视频加载就绪后自动播放（chrome 不允许） controls controls 显示视频控件 width pixels（像素） 设置播放器的宽度 height pixels（像素） 设置播放器的高度 loop loop 循环播放 preload auto（预先加载视频）none（不预先加载视频） 设置是否预先加载视频（autoplay 会预先加载视频） src url 视频 url 地址 poster img url 等待加载时显示的图片 muted muted 静音播放（chrome 允许） 当前音频和视频标签的元素支持的格式是有限的 支持的三种音频格式分别是：MP3、Wav、Ogg 支持的三种视频格式分别是：MP4、WebM、Ogg MP3和MP4的兼容性最高，尽量使用MP3格式的音频和MP4格式的视频即可 input新增类型属性：语法： 1&lt;input type=&quot;search&quot;&gt;&lt;/input&gt; 属性值 描述 type=”email” 限制用户输入必须为 Email 类型 type=”url” 限制用户输入必须为 url地址 类型 type=”date” 限制用户输入必须为 日期 类型 type=”time” 限制用户输入必须为 时间 类型 type=”month” 限制用户输入必须为 月 类型 type=”week” 限制用户输入必须为 周 类型 type=”number” 限制用户输入必须为 数字 类型 type=”tel” 限制用户输入必须为 手机号码 类型 type=”search” 搜索框，不限制用户输入类型 type=”color” 颜色选择表单 重点记住：number、tel、search 这三个 input新增表单属性： 属性 属性值 描述 required required 表单的内容不能为空，必填 placeholder 提示文本 表单的提示信息，存在默认值则不显示 autofocus autofocus 自动聚焦，页面加载完成后自动聚焦到该表单 autocomplete off / on 是否打开输入记录，默认是打开 multiple multiple 可以多选文件提交 重点记住：placeholder、multiple 这两个 二、CSS3的新特性同样的，CSS3新增的特性也有兼容性问题，IE9+ 以上版本的浏览器才支持 现阶段主要学习，CSS3的新增选择器和盒子模型以及其他特性 属性选择器：属性选择器可以根据元素的特定属性来选择元素，这样就可以不用全部都借助于类或 id 选择器（权重为0,0,1,0） 选择符 描述 E[att] 选择具有 att 属性的 E 元素 E[att=”val”] 选择具有 att 属性，且属性值等于 val 的 E 元素 E[att^=”val”] 选择具有 att 属性，且属性值以 val 开头的 E 元素 E[att$=”val”] 选择具有 att 属性，且属性值以 val 结尾的 E 元素 E[att=”val”]* 选择具有 att 属性，且属性值中含有 val 的 E 元素 其中 E 为任意标签，att 为该标签拥有的属性 结构伪类选择器：结构伪类选择器主要根据文档结构来选择元素，常用于根据父级选择里面的子元素（权重为0,0,1,0） 选择符 描述 E:first-child 选择父元素中的第一个子元素 E E:last-child 选择父元素中的最后一个子元素 E E:nth-child(n) 选择父元素中的第 n 个子元素 E E:first-of-type 选择所有子元素中指定类型 E 元素的第一个 E:last-of-type 选择所有子元素指定类型 E 元素的最后一个 E:nth-of-type(n) 选择所有子元素指定类型 E 元素的第 n 个 区别： nth-child 对父元素里面的所有子元素排序选择（序号是固定的），先找到第 n 个元素，再判断是否和 E 匹配 nth-of-type 对父元素里面的指定子元素排序选择，先匹配 E ，然后再根据 E 找到第 n 个元素 nth-child(n) 和 nth-of-type(n)可以选择一个或多个特定的子元素 n 可以是数字、关键字和公式 n 如果是数字：就是选择第 n 个子元素，里面数字从1开始递增 n 如果是关键字：even 偶数，odd 奇数 n 如果是公式：常见的公式如下（如果 n 是公式，则从0开始计算吗，每次递增，第0个元素或超出元素的个数会被忽略） 公式 取值 2n 偶数 2n+1 奇数 5n 5 10 15 20 … n+5 从第5个开始（包括第5个元素）到最后 -n+5 前5个（包括第5个元素） 伪元素选择器：（重点）伪元素选择器可以帮助我们利用CSS创建新的标签元素，而不需要HTML标签，从而简化HTML结构 选择符 描述 ::before 在元素内部的前面插入内容 ::after 在元素内部的后面插入内容 注意： before 和 after 会创建一个元素，但是属于行内元素 新创建的这个元素在文档树中是找不到的，所以我们称之为伪元素 before 和 after 必须有 content 属性 伪元素选择器和标签选择器一样，权重为0,0,0,1 盒子模型：CSS3中可以通过 box-sizing 来指定盒子模型的大小 其有两个值：即可指定为 content-box、border-box，这样我们计算盒子大小的方式就放生了改变 可以分为两种情况： box-sizing: content-box 盒子大小为 width + padding + border（默认的） box-sizing: border-box 盒子大小为 width 如果盒子模型我们改为了 box-sizing: border-box，那么 padding 和 border 就不会撑大盒子 注意：前提条件 padding 和 border 相加不会超过 width 的大小 CSS3滤镜 filter ：（了解）filter CSS3属性将模糊或颜色偏移等图像效果应用于元素 语法： 1filter: 函数(); 例如：filter: blur(5px); blur模糊处理 数值越大越模糊 CSS3函数 calc：calc() CSS3函数可以在声明属性值时执行一些计算 例如： 1width: calc(100% - 50px); 括号里面可以使用 +（加）、**-（减）、（乘）*、/（除）**进行计算 CSS3过渡：（重点）过渡（transition）是CSS3中具有颠覆性的特征之一，我们可以在不适用 Flash 动画或 JavaScript 脚本的情况下，当元素从一种样式变换为另一种样式时为元素添加效果 过渡动画：是从一个状态渐渐的过渡到另一个状态 可以让我们页面更好看，更动感，虽然低版本浏览器不支持（IE9 以下版本），但是不会影响页面布局 实际开发中，经常和 :hover 一起搭配使用 语法： 1transiton: 过渡属性 花费时间 运动曲线 何时开始; 过渡属性：想要变化的属性，宽度、高度、背景颜色、内外边距等都可以，all 表示所有属性 花费时间：单位是s（秒）（必须写单位） 运动曲线：默认是 ease（可以省略） 何时开始：单位是s（秒）（必须写单位），可以设置延迟触发事件，默认是0s（可以省略）","link":"/2022/02/18/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E6%8F%90%E9%AB%98%E5%AF%BC%E8%AF%BB/"},{"title":"CSS学习笔记第六章-定位","text":"一、为什么需要浮动让某个元素可以自由的在一个盒子内移动，并且压住其他盒子，标准流或浮动都无法快速实现，此时就需要定位来实现 浮动可以让多个块级盒子在一行内没有缝隙的排列显示，经常用于横向排列盒子 定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且压住其他盒子 二、定位的组成定位：将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子 定位 = 定位模式 + 边偏移 定位模式用于指定一个元素在文档中的定位方式；边偏移则决定了该元素的最终位置 定位模式：定位模式决定元素的定位方式，它通过CSS的 position 属性来设置，其属性值可以分为四个： 属性值 语义 static（默认） 静态定位 relative 相对定位 absolute 绝对定位 fixed 固定定位 边偏移：边偏移就是定位的盒子移动到最终位置，有 top、bottom、left 和 right共 4 个属性： 属性 示例 描述 top top: 100px 顶端偏移量，定义元素相对于其父元素上边线的距离 bottom bottom: 100px 底部偏移量，定义元素相对于其父元素下边线的距离 left left: 100px 左侧偏移量，定义元素相对于其父元素左边线的距离 right right: 100px 右侧偏移量，定义元素相对于其父元素右边线的距离 三、静态定位 static静态定位是元素的默认定位方式，无定位的意思 语法： 1选择器 { position: static; } 特性： 静态定位按照标准流特性摆放位置，它没有边偏移 静态定位在布局时一般很少用到 四、相对定位 relative相对定位是元素在移动位置的时候，是相对于它原来的位置来说的（自恋型，以自我为中心） 语法： 1选择器 { position: relative; } 特性： 他是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来位置） 原来在标准流的位置会继续占有，后面的盒子仍然以标准流的方式对待它（不脱标，继续保留原来的位置） 五、绝对定位 absolute绝对定位是元素在移动位置的时候，是相对于它父元素来说的（拼爹型，以父元素为中心） 语法： 1选择器 { position: absolute; } 特性： 如果没有父元素或者父元素没有定位，则以浏览器（Document文档）为准进行定位 如果父元素有定位（相对、绝对或固定定位），则以最近一级的有定位父元素为参考点移动位置 绝对定位不再占有原先的位置（脱标） 六、固定定位 fixed固定定位是元素固定于浏览器可视区的位置，主要使用场景：可以在浏览器页面滚动时元素的位置不会改变 语法： 1选择器 { position: fixed; } 特性： 以浏览器的可视窗口为参照点移动元素 跟父元素没有任何关系，不随滚动条滚动 固定定位不再占有原先的位置（脱标） 七、粘性定位 sticky（了解）粘性定位可以被认为是相对定位和固定定位的混合 语法： 1选择器 { position: sticky; 边偏移 } 特性： 以浏览器的可视窗口为参照点移动元素（固定定位的特性） 粘性定位占有原来的位置（相对定位的特性） 必须添加一个边偏移量才有效 跟页面滚动搭配使用，但是兼容性较差，IE不支持 八、定位总结 定位模式 是否脱标 移动位置 是否常用 static 静态定位 否（占有位置） 不能使用边偏移 很少 relative 相对定位 否（占有位置） 相对于自身位置 常用 absolute 绝对定位 是（不占有位置） 带有定位的父级 常用 fixed 固定定位 是（不占有位置） 浏览器可视区域 常用 sticky 粘性定位 否（占有位置） 浏览器可视区域 不常用 九、子绝父相弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景 这个”子绝父相”太重要了，是我们学习定位的口诀，是定位中最常用的一种方式 这句话的意思是：子级是绝对定位的话，父级就要用相对定位 子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子 父盒子需要加定位限制子盒子在父盒子内显示 父盒子布局时，需要占有位置，因此父亲只能是相对定位 这就是子绝父相的由来，所以相对定位经常用来作为绝对定位的父级 总结：因为父盒子需要占有位置，因此是相对定位，子盒子不需要占有位置，则是绝对定位 十、定位叠放顺序 z-index在使用定位布局时，可能会出现盒子重叠的情况，此时，可以使用 z-index 来控制盒子的前后次序（z轴） 语法： 1选择器 { z-index: 1; } 特性： 数值可以是正整数、负整数或0，默认是 auto ，数值越大，盒子越靠上 如果属性值相同，则按照书写顺序，后来居上 数值后面不能加单位 只有定位的盒子才有 z-index 属性 十一、定位的扩展绝对定位的盒子居中：加了绝对定位的盒子不能通过 margin 属性进行水平居中，但是可以通过一下计算方法实现水平和垂直居中 left: 50%; 让盒子的左侧移动到父元素的水平中心位置 margin-left: -100px; 让盒子向左移动自身宽度的一半（假设盒子宽度为200px） 定位的特殊特性：绝对定位和固定定位也有和浮动类似的特性 行内元素添加绝对或者固定定位，可以直接设置高度和宽度 块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认的大小就是内容的大小 脱标的盒子不会触发外边距塌陷：浮动元素、绝对定位和固定定位元素都不会触发外边距合并的问题 绝对定位和固定定位会完全压住盒子：浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片） 但是绝对定位和固定定位会压住下面标准流所有的内容 浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环刃效果的，文字会围绕着浮动元素","link":"/2022/02/15/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%AE%9A%E4%BD%8D/"},{"title":"CSS学习笔记第五章-浮动","text":"一、传统网页布局网页布局的本质——就是用CSS来摆放盒子，把盒子摆放到相应位置。 CSS提供了三种传统布局方式： 普通流（标准流） 浮动 定位 二、标准流（普通流/文档流）所谓标准流：就是标签按照规定好默认方式排列 1.块级元素会独占一行，从上向下顺序排列 常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table 等 2.行内元素会按照从左到右顺序排列，碰到父元素边缘则自动换行 常用元素：span、a、i、em 等 以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。 注意：实际开发中，一个页面基本都包含了这三种布局方式（移动端会学习新的布局方式）。 三、为什么需要浮动？因为有很多的布局效果，标准流没有办法完成，而浮动可以改变元素标签默认的排列方式，此时就可以利用浮动来完成布局。 浮动最典型的应用：可以让多个块级元素在一行内排列显示。 网页布局第一准则： 多个块级元素纵向排列找标准流 多个块级元素横向排列则找浮动 四、什么是浮动？float属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含快或另一个浮动框的边缘则换行。 语法： 1选择器 { float: 属性值; } 属性值 描述 none 元素不浮动（默认值） left 元素向左浮动 right 元素向右浮动 五、浮动的特性（重难点）加入了浮动之后的元素，会具有很多特性，需要我们掌握的。 1.浮动元素会脱离标准流（脱标） 脱离标准流的控制（浮），移动到指定位置（动）。 浮动的盒子不再保留原先的位置。 2.浮动的元素会在一行内显示并且元素顶部对齐 如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列。 浮动的元素是相互贴靠在一起的（不会有缝隙），如果父级的宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐显示。 3.浮动的元素会具有行内块元素的特性 任何元素都可以浮动，不管原先是什么模式的元素，添加浮动之后都会具有行内块元素相似的特性。 如果块级元素没有设置宽度，默认宽度和父级元素一样宽，但是添加浮动后，它的宽度根据内容来决定。 六、浮动布局的注意点1.浮动元素和标准的父元素搭配使用为了约束浮动元素的位置，网页布局一般采取的策略是浮动盒子和父元素盒子搭配使用。 先用标准流的父元素排列上下位置，内部的子元素采取浮动排列左右位置，符合网页布局第一准则。 2.一个元素浮动了，理论上其余的兄弟元素也要浮动一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他盒子也应该浮动，以防止引起问题。 浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流。 七、清除浮动1.为什么需要清除浮动由于父级盒子很多情况下，不方便给高度，但是盒子浮动又不占有标准流的位置，最后父级盒子高度为0时，就会影响下面的标准流盒子。 2.清除浮动的本质 清除浮动元素对标准流造成的影响 如果父级盒子本身有高度，则不需要清除浮动 清除浮动之后，父级盒子就会根据浮动的子盒子自动检测高度，这样父级就有了高度，就不会影响后面的标准流了 4.清除浮动的策略清除浮动就是闭合浮动，只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子。 八、清除浮动的方法1.额外标签法额外标签法也称为隔墙法，是W3C推荐的做法 语法： 1选择器 { clear: 属性值; } 属性值 描述 left 不允许左侧有浮动元素（清除左侧浮动的影响） right 不允许右侧有浮动元素（清除右侧浮动的影响） both 同时清除左右两侧浮动的影响（实际开发中，常用） 额外标签法就是在最后一个浮动的子元素后面再添加一个空的标签，为其添加清除浮动样式。 例如：&lt;div style=&quot; clear: both &quot;&gt;&lt;/div&gt; 优点：通俗易懂，书写方便 缺点：会导致添加了许多无意义的标签，结构化较差 2.父级添加overflow属性（简单了解）给父级元素添加overflow属性，将其属性值设置为hidden、auto或scroll。 优点：代码简洁 缺点：无法显示溢出的部分 3.父级添加after伪元素此方式是额外标签法的升级版，给父级元素添加事先预定义好的after伪元素选择器 12345678910.clearfix:after { content: &quot;&quot;; display: block; height: 0; clear: both; visibility: hidden;}.clearfix { /* IE6、7专有 */ *zoom: 1;} 优点：没有增加额外的标签，结构更简单 缺点：照顾低版本浏览器 代表网站：百度、淘宝、网易等 4.父级添加双伪元素给父级元素添加事先预定义好的双伪元素选择器 12345678910.clearfix:before, .clearfix:after { content: &quot;&quot;; display: table;}.clearfix:after { clear: both;}.clearfix { *zoom: 1;} 优点：代码更简洁 缺点：照顾低版本浏览器 代表网站：小米、腾讯等","link":"/2022/02/14/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%B5%AE%E5%8A%A8/"},{"title":"CSS学习笔记第八章-高级技巧","text":"一、精灵图为什么需要精灵图：一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片的加载，造成服务器请求压力过大，这将大大降低网页的加载速度 因此，为了有效地减少服务器接收和发送请求的次数，提高网页的加载速度，出现了CSS精灵技术 核心原理：将网页中的一些小背景图像整合到一张大图中，这样服务器只需要一次请求就可以了 主要借助于背景位置来实现：background-position 二、字体图标主要用于显示网页中通用、常用的一些小图标 轻量级：一个图标字体要比一系列的图像要小，一旦字体加载了，图标会马上渲染出来 灵活性：本质其实就是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等 兼容性：几乎支持所有的浏览器 注意：字体图标不能替代精灵图技术，只是对工作中图标部分技术的提升和优化 字体图标是一些网页常见的小图标，我们直接网上下载即可 字体图标的下载 字体图标的引用 字体图标的追加 三、CSS三角网页中常见的一些三角形，使用CSS可以直接画出来，不必做成图片或者字体图标 123456789/* 黑色小三角 范例 */div { width: 0; height: 0; line-height: 0; font-size: 0; border: 50px solid transparent; border-left-color: black;} 四、CSS用户界面样式所谓的界面样式，就是更改一些用户操作样式，以便提高更好的用户体验 鼠标样式：设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状 语法： 1cursor: default | pointer | move | text | not-allowed 属性值 default 指针（默认） pointer 小手 move 移动 text 文本 not-allowed 禁止 表单轮廓：给表单添加以下样式后，就可以去掉默认的蓝色边框 语法： 1outline: 0 | none; 防止表单域拖拽：实际开发中，我们文本域右下角是不可以拖拽的 语法： 1textarea { resize: none; } 五、vertical-align 属性用于设置一个元素的垂直对齐方式，但是它只针对于行内元素或者行内块元素有效 使用场景：经常用于设置图片或表单和文字的垂直对齐 语法： 1vertical-align: baseline | top | middle | bottom 属性值 描述 baseline 元素放置在父元素的基线上（默认） top 把元素的顶端与行中最高元素的顶端对齐 middle 把元素放置在父元素的中部 bottom 把元素的底端与行中最低元素的底端对齐 解决图片底部默认有空白缝隙的问题：图片底侧默认的会有一个空白缝隙，原因是行内块元素会和文字的基线对齐 主要解决方法有两种： 给图片添加 vertical-align: top | middle | bottom 等（提倡使用） 把图片转换为块级元素 display: block 六、溢出的文字省略号显示当一段文本溢出了，突然的截断会不好看，此时用省略号作为结尾 单行文本溢出显示省略号：必须满足三个条件： 将文本强制一行内显示 12/* 默认 normal 自动换行 */white-space: nowrap; 溢出的部分隐藏 1overflow: hidden; 文字用省略号替代溢出的部分 1text-overflow: ellipsis; 多行文本溢出显示省略号：多行文本溢出显示省略号，有较大的兼容性问题，适合于webKit浏览器或移动端（移动端大部分是webKit内核） 代码实现如下： 12345678overflow: hidden;text-overflow: ellipsis;/* 弹性伸缩盒子模型显示 */display: -webkit-box;/* 限制在一个块元素中显示的文本的行数 */-webkit-line-clamp: 2;/* 设置或检索伸缩盒子的子元素的排列方式 */-webkit-box-orient: vertical; 注意：实际开发中，更推荐后端来做这个效果，因为后端人员可以设置显示多少个子，操作更简单 七、常见布局技巧margin负值的运用：当一行内的有多个相同盒子排列显示时，如果给其添加边框后，盒子与盒子直接的缝隙会叠加 此时，给盒子添加如下样式，就可以清楚缝隙叠加 12/* 此时的负值是边框的宽度 */margin-left: -1px; 这样的做法其实就是，下一个盒子将上一个盒子的边框压住了 浏览器渲染的时候是一个一个渲染的，不必担心所有盒子都向左移动了边框没有压住的情况 实现鼠标移动到盒子上时，显示对应的边框，则可以通过以下两种方法： 如果当前盒子没有定位，则加相对定位（保留原来位置，压住其他盒子的边框） 如果当前盒子有定位，则加 z-index 来提高层级 文字围绕浮动元素：浮动虽然不保留原来的位置，但是也不会压住文字 可以根据这个特性，做出文字围绕着图片（浮动元素）的效果 行内块元素的巧妙运用：要在一行内显示盒子时，将行内元素转换行内块元素，就可以为其设置宽度和高度 CSS三角强化：在网页中，除了定义等腰三角形外，我们还可以定义其他类型的三角形 例如：直角三角形 12345width: 0;height: 0;border-color: transparent red transparent transparent;border-style: solid;border-width: 22px 8px 0 0; 八、CSS初始化不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML网页的呈现差以，照顾浏览器的兼容性，我们需要对CSS进行初始化 简单理解：CSS初始化是指重设浏览器的样式（也称为CSS reset） 每个网页都必须首先进行CSS初始化，这里我们以京东的CSS初始化代码为例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/* 清除所有标签的外边距和内边距 */* { margin: 0; padding: 0;}/* 清除 em 和 i 的字体倾斜 */em,i { font-style: normal;}/* 去除 li 的小圆点 */li { list-style: none;}img { /* 照顾低版本浏览器，如果图片外面包含了链接会有边框的问题 */ border: 0; /* 避免图片底侧有空白缝隙的问题 */ vertical-align: middle;}/* 当我们鼠标经过 button 按钮的时候，鼠标变成小手的形式 */button { cursor: pointer;}/* 改变 a 链接的默认颜色 和 去除下划线 */a { color: #666; text-dacoration: none;}/* 改变鼠标放在 a 链接上的颜色 */a:hover { color: #c81623;}/* 改变 button 按钮 和 input 表单的文本字体 */button,input { font-family: Microsoft YaHei, Heiti SC, tohoma, arial, Hiragino Sans GB, &quot;\\5B8B\\4F53&quot;;}body { /* CSS3 抗锯齿性 让文字显示的更加清晰 */ -webkit-font-smoothing: antialiased; /* 改变主体的文本颜色 */ background-color: #fff; /* 改变主体的文本字体 */ font: 12px/1.5 Microsoft YaHei, Heiti SC, tohoma, arial, Hiragino Sans GB, &quot;\\5B8B\\4F53&quot;;}/* 定义的元素隐藏样式 */.hide,.none { display: none;}/* 清除浮动 */.clearfix:after { visibility: hidden; clear: both; display: block; content: &quot;.&quot;; height:0;}/* 照顾低版本浏览器 */.clearfix { *zoom: 1;}","link":"/2022/02/17/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%85%AB%E7%AB%A0-%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/"},{"title":"CSS学习笔记第四章-三大特性及盒子模型","text":"一、CSS的三大特性CSS有非常重要的三个特性：层叠性、继承性和优先级 层叠性：层叠性主要就是解决样式冲突的问题 相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式 层叠性原则： 样式冲突，遵循就近原则，哪个样式离结构近，就会执行哪个样式 如果样式不冲突，则不会层叠 继承性：继承性就是子标签会继承父标签的某些样式，简单理解就是子承父业 恰当地使用继承可简化代码，降低CSS样式的复杂性 子元素可以继承父元素的样式（text、font、line 这些元素开头的可以继承，以及 color 属性） 行高的继承： 行高可以跟单位也可以不跟单位，不跟单位是就是行高*当前的字体大小 不跟单位时子元素继承父元素的行高*当前子元素的字体大小 如果子元素没有设置字体大小，则会继承父元素的字体大小和行高 不跟单位最大的写法优势就是子元素可以根据自己的字体大小自动调整行高 优先级：当同一个元素指定了多个选择器时，就会有优先级的产生 优先级原则： 选择器相同，则执行层叠性原则 选择器不同，则根据选择器的权重执行 选择器权重： 选择器 权重 继承、*（通配符） 0,0,0,0 元素选择器 0,0,0,1 类选择器、伪类选择器 0,0,1,0 ID选择器 0,1,0,0 行内样式表 1,0,0,0 !important重要的 无穷大 口诀：范围越小，权重越大 注意： 权重是有4组数字组成的 等级判断从左向右，数值相同，则判断下一位数值 如果元素没有被选择器直接选中，而是继承得来的，不管父元素的权重多高，子元素得到的权重都是0,0,0,0 复合选择器的权重叠加，但是永远不会有进位 二、盒子模型网页布局要学习三大核心：盒子模型 、浮动和定位 学习好盒子模型能非常好的帮助我们布局页面 看透网页布局的本质： 先准备好相关的网页元素，网页元素基本都是盒子 利用CSS设置好盒子样式，然后摆放到相应位置 最后往盒子里面装内容即可 网页布局的核心本质：就是利用CSS摆放盒子 三、盒子模型的组成所谓盒子模型就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器 CSS盒子模型本质上是一个盒子，封装周围的HTML元素，它包括边框、内边距、外边距和实际内容 border：边框 content：内容 padding：内边距 margin：外边距 border（边框，边框会影响盒子的实际大小）：border 可以设置元素的边框，边框的三部分组成：边框宽度(粗细)、边框样式和边框颜色 语法: 1border: border-width || border-style || border-color; 属性 属性值 描述 border-width 单位 px 定义边框粗细 border-style solid / dashed / dotted 定义边框样式 border-color 预定义颜色 / 十六进制 / RGB代码 定义边框颜色 复合属性写法： 1border: border-width border-style border-color;(没有顺序) 也可以只定义其中一边的边框： 属性 描述 border-top 定义上边框 border-bottom 定义下边框 border-left 定义左边框 border-right 定义右边框 表格的边框： border-collapse 属性控制浏览器绘制表格边框的方式，它控制相邻单元格的边框 语法 ： 1border-collapse: separate | collapse; 属性 描述 separate 边框独立（默认） collapse 相邻边框被合并 padding（内边距，内边距会影响盒子的实际大小）：padding 可以设置内边距，即边框与内容之间的距离 语法： 1padding: length...; 1个length值，设置的是上下左右的内边距 2个length值，第一个值用于上－下内边距，第二个值用于左－右内边距 3个length值，第一个值用于上内边距，第二个值用于左－右内边距，第三个值用于下内边距 4个length值，将按上－右－下－左的顺序作用于四边的内边距 也可以只定义其中一边的内边距： 属性 描述 padding-top 定义上内边距 padding-bottom 定义下内边距 padding-left 定义左内边距 padding-right 定义右内边距 注意：如果盒子本身没有指定 width / height 属性的大小，则此时 padding 不会撑开盒子大小 margin（外边距）：margin属性用于设置外边距，即控制盒子和盒子之间的距离 语法: 1margin: length... 1个length值，设置的是上下左右的外边距 2个length值，第一个值用于上－下外边距，第二个值用于左－右外边距 3个length值，第一个值用于上外边距，第二个值用于左－右外边距，第三个值用于下外边距 4个length值，将按上－右－下－左的顺序作用于四边的外边距 也可以只定义其中一边的外边距： 属性 描述 margin-top 定义上外边距 margin-bottom 定义下外边距 margin-left 定义左外边距 margin-right 定义右外边距 四、外边距典型应用外边距可以让块元素盒子水平居中，但是必须满足两个条件 盒子必须指定了宽度 盒子左右的外边距都设置为auto 写法： 1234567/* 写法一 */margin-left: auto;margin-right: auto;/* 写法二 */margin: 0 auto;/* 写法三 */margin: auto; 注意： 以上方法是让块元素水平居中 要使行内元素或者行内块元素水平居中给其父元素添加 text-align: center 五、外边距合并使用margin定义块元素的垂直外边距时，可能会出现外边距的合并 相邻块元素垂直外边距的合并：当上下相邻的两个块元素(兄弟关系)相遇时，如果上面的元素有下边距，下面的元素有上边距 则它们之间的垂直距离是取决于两个值中的较大者，这种现象被称为相邻块元素垂直外边距的合并 解决方案： 尽量只给其中的一个盒子加margin值 嵌套块元素垂直外边距的塌陷：对于两个嵌套关系(父子关系)的块元素，若父元素有上边距同时子元素也有上边距的情况下 此时父元素会塌陷较大的外边距值，这种现象被称为嵌套块元素垂直外边距的塌陷 解决方案： 可以为父元素定义上边框 可以为父元素定义上内边距 可以为父元素添加 overflow: hidden 六、清除内外边距网页元素很多都带有默认的内外边距，并且不同浏览器的默认值也不一致，因此我们在布局前，首先要清除网页元素的内外边距 语法： 1234* { padding: 0; margin: 0;} 注意： 行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距，但是转换为块元素或行内元素就可以了 七、CSS3新增的盒子样式圆角边框：可以设置元素的外边框圆角 语法： 1border-radius: length; radius 半径（圆的半径）原理：（椭）圆与边框的交集（相切）形成圆角效果 注意： 参数值可以为数值或百分比（高度的百分比）的形式 参数值也可以有多个值，也可以指定一个角 当有两个值时，第一个设置的左上和右下角，第二个设置的左下和右上角（对角关系） 当有四个值时，分别代表左上角－右上角－右下角－左下角（顺时针） 也可以分开写，例如：border-top-left-radius（左上角） 或者 border-top-right-radius（右上角）等 盒子阴影：可以为盒子添加阴影 语法： 1box-shadow: h-shadow v-shadow blur spread color inset; 属性 描述 h-shadow 必需，水平阴影的位置，允许为负值 v-shadow 必需，垂直阴影的位置，允许为负值 blur 可选，模糊距离 spread 可选，阴影尺寸 color 可选，阴影的颜色 inset 可选，将外部阴影（outset）改为内部阴影","link":"/2022/02/13/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%E5%8F%8A%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"}],"tags":[],"categories":[]}